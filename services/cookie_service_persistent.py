import os
import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, Optional

from .persistent_session_service import PersistentSessionService

logger = logging.getLogger(__name__)

class CookieServicePersistent:
    """CookieService que usa sess√£o persistente para atualiza√ß√£o cont√≠nua de cookies"""

    def __init__(self, cookie_filepath: str = "cookies.txt"):
        self.cookie_filepath = cookie_filepath
        self.session_service = PersistentSessionService(cookie_filepath)
        
        # Configura√ß√µes de refresh
        self.auto_refresh_interval = timedelta(minutes=15)  # Refresh a cada 15 min
        self.last_refresh = None
        self._refresh_lock = asyncio.Lock()
        
        # Task para refresh autom√°tico
        self._refresh_task: Optional[asyncio.Task] = None
        self._shutdown_event = asyncio.Event()

    async def initialize(self) -> bool:
        """Inicializa o servi√ßo e a sess√£o persistente"""
        try:
            logger.info("üöÄ Inicializando CookieService com sess√£o persistente...")
            
            # Inicializar sess√£o persistente
            success = await self.session_service.initialize_session()
            if not success:
                logger.error("‚ùå Falha ao inicializar sess√£o persistente")
                return False
            
            # Iniciar task de refresh autom√°tico
            self._refresh_task = asyncio.create_task(self._auto_refresh_loop())
            
            logger.info("‚úÖ CookieService com sess√£o persistente inicializado!")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao inicializar CookieService: {e}")
            return False

    async def ensure_fresh_cookies(self) -> bool:
        """Garante que os cookies est√£o frescos usando a sess√£o persistente"""
        async with self._refresh_lock:
            try:
                # Verificar sa√∫de da sess√£o primeiro
                if not await self.session_service.health_check():
                    logger.warning("‚ö†Ô∏è Sess√£o n√£o est√° saud√°vel, tentando renovar...")
                    if not await self.session_service.renew_session():
                        logger.error("‚ùå Falha ao renovar sess√£o")
                        return False
                
                # Verificar se precisa refresh baseado no tempo
                needs_refresh = False
                if self.last_refresh is None:
                    needs_refresh = True
                    logger.info("üîÑ Primeiro refresh da sess√£o")
                elif datetime.now() - self.last_refresh > self.auto_refresh_interval:
                    needs_refresh = True
                    logger.info("üîÑ Refresh peri√≥dico necess√°rio")
                
                if needs_refresh:
                    success = await self.session_service.refresh_session_cookies()
                    if success:
                        self.last_refresh = datetime.now()
                        logger.info("‚úÖ Cookies atualizados via sess√£o persistente")
                        return True
                    else:
                        logger.warning("‚ö†Ô∏è Falha no refresh, mas sess√£o ainda ativa")
                        return False
                else:
                    logger.info("‚úÖ Cookies ainda s√£o v√°lidos (sess√£o ativa)")
                    return True
                    
            except Exception as e:
                logger.error(f"‚ùå Erro ao garantir cookies frescos: {e}")
                return False

    async def force_refresh(self) -> bool:
        """For√ßa refresh imediato dos cookies"""
        async with self._refresh_lock:
            try:
                logger.info("üîÑ For√ßando refresh de cookies...")
                
                success = await self.session_service.refresh_session_cookies()
                if success:
                    self.last_refresh = datetime.now()
                    logger.info("‚úÖ Refresh for√ßado bem-sucedido")
                    return True
                else:
                    logger.warning("‚ùå Falha no refresh for√ßado")
                    return False
                    
            except Exception as e:
                logger.error(f"‚ùå Erro no refresh for√ßado: {e}")
                return False

    async def _auto_refresh_loop(self):
        """Loop autom√°tico para refresh peri√≥dico de cookies"""
        logger.info("üîÑ Iniciando loop de refresh autom√°tico...")
        
        while not self._shutdown_event.is_set():
            try:
                # Aguardar pr√≥ximo ciclo ou shutdown
                try:
                    await asyncio.wait_for(
                        self._shutdown_event.wait(), 
                        timeout=self.auto_refresh_interval.total_seconds()
                    )
                    # Se chegou aqui, √© porque o shutdown foi sinalizado
                    break
                except asyncio.TimeoutError:
                    # Timeout normal, continuar com refresh
                    pass
                
                # Verificar se a sess√£o est√° ativa antes de tentar refresh
                if self.session_service.is_active:
                    logger.info("üîÑ Auto-refresh de cookies...")
                    
                    try:
                        await self.ensure_fresh_cookies()
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è Erro no auto-refresh: {e}")
                        
                        # Tentar renovar sess√£o se falhar
                        logger.info("üîÑ Tentando renovar sess√£o ap√≥s falha...")
                        await self.session_service.renew_session()
                else:
                    logger.warning("‚ö†Ô∏è Sess√£o inativa no auto-refresh")
                    
            except Exception as e:
                logger.error(f"‚ùå Erro no loop de auto-refresh: {e}")
                # Aguardar um pouco antes de tentar novamente
                await asyncio.sleep(60)
        
        logger.info("üõë Loop de auto-refresh encerrado")

    def get_cookie_status(self) -> Dict:
        """Retorna status completo dos cookies e sess√£o"""
        cookie_exists = os.path.exists(self.cookie_filepath)
        cookie_count = 0
        
        if cookie_exists:
            try:
                with open(self.cookie_filepath, 'r') as f:
                    lines = [line for line in f if not line.strip().startswith('#') and line.strip()]
                    cookie_count = len(lines)
            except Exception:
                cookie_count = 0
        
        session_status = self.session_service.get_session_status()
        
        return {
            "cookie_file_exists": cookie_exists,
            "cookie_count": cookie_count,
            "last_refresh": self.last_refresh.isoformat() if self.last_refresh else None,
            "auto_refresh_interval_minutes": self.auto_refresh_interval.total_seconds() / 60,
            "cookie_file_path": self.cookie_filepath,
            "session_status": session_status,
            "mode": "persistent_session"
        }

    async def get_detailed_status(self) -> Dict:
        """Status detalhado incluindo health check da sess√£o"""
        basic_status = self.get_cookie_status()
        
        # Adicionar health check em tempo real
        session_healthy = await self.session_service.health_check()
        
        basic_status.update({
            "session_healthy": session_healthy,
            "refresh_task_running": self._refresh_task and not self._refresh_task.done(),
            "minutes_since_last_refresh": (
                (datetime.now() - self.last_refresh).total_seconds() / 60
                if self.last_refresh else None
            )
        })
        
        return basic_status

    async def shutdown(self):
        """Encerra o servi√ßo e a sess√£o persistente"""
        logger.info("üõë Encerrando CookieService persistente...")
        
        # Sinalizar shutdown para o auto-refresh loop
        self._shutdown_event.set()
        
        # Aguardar o task de refresh terminar
        if self._refresh_task and not self._refresh_task.done():
            try:
                await asyncio.wait_for(self._refresh_task, timeout=10)
            except asyncio.TimeoutError:
                logger.warning("‚ö†Ô∏è Timeout ao aguardar task de refresh")
                self._refresh_task.cancel()
        
        # Encerrar sess√£o persistente
        await self.session_service.shutdown()
        
        logger.info("‚úÖ CookieService persistente encerrado")


# Fun√ß√£o para detectar qual CookieService usar
def create_cookie_service(persistent_mode: bool = True) -> 'CookieServiceBase':
    """Factory para criar o CookieService apropriado"""
    
    if persistent_mode:
        try:
            # Verificar se Playwright est√° dispon√≠vel
            import playwright
            return CookieServicePersistent()
        except ImportError:
            logger.warning("‚ö†Ô∏è Playwright n√£o dispon√≠vel, usando modo fallback")
            from .cookie_service_fallback import CookieServiceFallback
            return CookieServiceFallback()
    else:
        # Modo n√£o-persistente (original)
        try:
            from .cookie_service import CookieService
            return CookieService()
        except ImportError:
            from .cookie_service_fallback import CookieServiceFallback
            return CookieServiceFallback()
